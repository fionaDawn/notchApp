import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getProducts } from '../service/products';

const initialState = {
    status: "idle",
    error: "",
    products: [],
    cart: {},
    cartItems: 0
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllProductsAsync = createAsyncThunk(
    'product/getAllProducts',
    async (searchText) => {
        const response = await getProducts(searchText);
        return response.data
    }
);

// export const getAllForksByGistIdAsync = createAsyncThunk(
//     'user/getAllForksByGistId',
//     async (id) => (await getAllForksByGistId(id)).data
// );

export const productSlice = createSlice({
    name: 'product',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addToCart: {
            reducer: (state, action) => {
                if (state.cart[action.payload["SKU"]]) {
                    state.cart[action.payload["SKU"]].quantity++
                } else {
                    state.cart[action.payload["SKU"]] = {
                        product: action.payload,
                        quantity: 1
                    }
                }
                state.cartItems++
            },
            prepare: (product) => ({ payload: product })
        },
        updateCartQuantity: {
            reducer: (state, action) => {
                const { id, qty } = action.payload;
                if (state.cart[id].quantity < qty) state.cartItems++
                else state.cartItems--
                state.cart[id].quantity = qty
            },
            prepare: (sku, qty) => ({ payload: { qty: qty, id: sku } })
        },
        clearCart(state) {
            state.cart = {}
            state.cartItems = 0;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getAllProductsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getAllProductsAsync.rejected, (state, action) => {
                state.status = action.error.message;
            })
            .addCase(getAllProductsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.products = action.payload;
            })
    },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectProduct = (state) => {
    return state.product;
}

export const { addToCart, updateCartQuantity, clearCart, } = productSlice.actions;
export default productSlice.reducer;
